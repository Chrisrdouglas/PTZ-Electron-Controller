module.exports = class Driver {
    /**
     * This will keep track of the settings for each camera
     */
    constructor() {
        try { this.config = require('../../configure.json'); }
        catch (e) { console.log('configuration.json not found'); }
        this.controllerDriver = null;
        this.subscribed = true;
        this.trackedSettings = [];
        this.cameraFunctions = null;

        //save important references
        this.selectedID = document.getElementById('leftTab');
        this.cameraIP = document.getElementById('cameraIP');
        this.cameraType = document.getElementById('cameraType');
        this.controllerName = document.getElementById('controllerName');
        this.remember = document.getElementById('remember')
        this.applicationMappings = document.getElementById('applicationMappings');
        this.cameraMappings = document.getElementById('cameraMappings');
        this.tabLeft = document.getElementById('tabLeft');
        this.tabRight = document.getElementById('tabRight');
    }

    deviceChanged() {
        var newInnerHTML = "<h2>Camera Mappings</h2>";

        //get camera and controller. make sure neither are null
        var controllerName = this.controllerName.value;
        var cameraType = this.cameraType.value;
        if (!controllerName || controllerName == "Select" || !cameraType || cameraType == "Select") {
            return;
        }


        //get controller's application settings from config.json
        this.reloadConfig();


        //update application settings on screen with the ones used by new controller
        try {
            this.tabLeft.value = this.config.controllers[controllerName]['Application'].tabLeft;
            this.tabRight.value = this.config.controllers[controllerName]['Application'].tabRight;
        }
        catch (e) { console.log("no defaults for this") }

        //get camera's function list from /cameras/CAMERANAME/cameraProperties
        this.cameraFunctions = require('../../cameras/' + cameraType + '/CameraProperties.json');
        console.log(this.cameraFunctions)

        //for each function in in cameraproperties, make a new line with "Function: TEXTAREA"
        //if config.controller.camera.function has a mapping then set textarea to that mapping
        /*    "Trigger": [
        "zoomIn",
        "zoomOut",
        "focusIn",
        "focusOut",
        "panLeft",
        "panRight",
        "tiltUp",
        "tiltDown"
        ],
        "Joystick": [
        "Pan+Tilt"
        ],
        "PartialStick": [
        "Zoom",
        "Focus",
        "Pan",
        "Tilt"
        ],
        "Button": [
        "autoFocus",
        "Load Preset (in progress)",
        "Save Preset (in progress)"
        ], */

        var first = '<div class="space"><b>{FUNCTIONNAME} ({TYPE})</b>'
        var second = '<input class="controllerInput" type="text" id="{FUNCTIONNAME}" name="tabRight" value="" onmousedown="driver.selected(id)" readonly><button class="clearButton" onmouseup="driver.clear({FUNCTIONNAME})">Clear</button></div>';


        //var functions = this.cameraFunctions.keys();
        for (var key in this.cameraFunctions) {
            //var functName = key;
            var inputType = this.cameraFunctions[key].inputType;
            newInnerHTML += first.replace('{FUNCTIONNAME}', key).replace('{TYPE}', inputType);
            newInnerHTML += second.replaceAll('{FUNCTIONNAME}', key);
        }

        //replace cameraMappings.innerHTML with the string generated by this function.
        this.cameraMappings.innerHTML = newInnerHTML;
    }

    selected(id) {
        this.selectedID = document.getElementById(id);
    }

    reloadConfig() {
        try { this.config = require('../../configure.json'); }
        catch (e) { console.log('configuration.json not found'); }
    }


    setController(controller) {
        this.controllerDriver = controller;
    }

    updateControllerState(controllerState) {
        console.log(controllerState)
        //this.selectedID is the name of the function that we're trying to set values for
        if (!this.selectedID) {
            return;
        }

        // if there's nothing interesting about the controller then terminate early so that we dont override something

        if (controllerState.Buttons.length == 0 && controllerState.Triggers.length == 0) {
            var countActive = 0;
            for (var i in controllerState.Joysticks) {
                if (controllerState.Joysticks[i].xActive || controllerState.Joysticks[i].yActive) {
                    countActive++;
                }

            }
            if (countActive == 0) { //nothing here. terminate early
                return;
            }
        }

        var command = '';
        //get selectedID's input type
        //input type will be in this.cameraFunctions[FUNCTION].inputType
        console.log(this.selectedID.id)
        var inputType = this.cameraFunctions[this.selectedID.id].inputType

        if (inputType == 'Button') {
            //itterate over all the buttons.
            for (var button in controllerState.Buttons) {
                if (controllerState.Buttons[button].pressed) {
                    command += controllerState.Buttons[button].label;
                    break;
                }
            }
            //if no button was pressed then no need to update the value
            if (command == '') {
                return;
            }
            else { //set command and terminate early
                this.selectedID.value = command;
                return;
            }
        }
        else {

            if (inputType == 'Trigger') { // check if it's a trigger type first because functions that can be mapped with them
                for (var k in controllerState.Triggers) {
                    if (controllerState.Triggers[k].pressed) {
                        command += controllerState.Triggers[k].label
                        break;
                    }
                }
            }
            else if (inputType == 'PartialJoystick') {
                var maxJoystickValue = 0.0;
                var joystickName = null;
                for (var i in controllerState.Joysticks) {
                    //Look for the joystick that has the highest value for its X or Y component
                    //we want to take the absolute value because that allows for controllers that
                    //use the [0,1] range style as well as the [0,255] style

                    //we're appending a .X or .Y to the joystick name to keep track of what axis
                    //will be used
                    if (Math.abs(controllerState.Joysticks[i].X) > maxJoystickValue) {
                        joystickName = controllerState.Joysticks[i].label + '.X';
                        maxJoystickValue = Math.abs(controllerState.Joysticks[i].X);
                    }
                    if (Math.abs(controllerState.Joysticks[i].Y) > maxJoystickValue) {
                        joystickName = controllerState.Joysticks[i].label + '.Y';
                        maxJoystickValue = Math.abs(controllerState.Joysticks[i].Y);
                    }
                }
                if (joystickName) {
                    command += joystickName;
                }

            }
            else if (inputType == 'Joystick') {
                //use the same method as Partial Joystick except that we dont append a ".X" or ".Y"
                var maxJoystickValue = 0.0;
                var joystickName = null;
                for (var i in controllerState.Joysticks) {
                    if (Math.abs(controllerState.Joysticks[i].X) > maxJoystickValue) {
                        joystickName = controllerState.Joysticks[i].label;
                        maxJoystickValue = Math.abs(controllerState.Joysticks[i].X);
                    }
                    if (Math.abs(controllerState.Joysticks[i].Y) > maxJoystickValue) {
                        joystickName = controllerState.Joysticks[i].label;
                        maxJoystickValue = Math.abs(controllerState.Joysticks[i].Y);
                    }
                }
                if (joystickName) {
                    command += joystickName;
                }


            }
            else { // There is something wrong with the CameraProperties.json
                console.log(inputType + ' is not a valid controller input option');
                return;
            }

            //aaaanddd now we check if there is a button so long as command is not ''
            if (command != '') {
                for (var button in controllerState.Buttons) {
                    if (controllerState.Buttons[button].pressed) {
                        command += ' + ' + controllerState.Buttons[button].label;
                        break;
                    }
                }
                this.selectedID.value = command;
            }
        }
    }

    clear() {
        this.selectedID.value = '';
    }

    saveConfig() {
        this.reloadConfig();
        this.config.cameraIP = this.cameraIP.value;
        this.config.controllerName = this.controllerName.value;
        var newConfiguration = {};
        var controllerName = this.controllerName.value;
        var cameraType = this.cameraType.value;

        if (!controllerName || controllerName == 'Select' || !cameraType || cameraType == 'Select') {
            return;
        }

        //        var appMappings = {tabLeft : document.getElementById('tabLeft').value,
        //tabRight : document.getElementById('tabRight').value};

        //this.config[controllerName].Application = appMappings

        this.config.controllers[controllerName][cameraType] = newConfiguration;

        //JSON.stringify(this.config)
    }

    getSubscribed() {
        return this.subscribed;
    }

}