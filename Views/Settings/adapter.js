const fs = require('fs');
module.exports = class Adapter {
    /**
     * Object that handles loading, starting, stopping of controllers as well as
     * loading configuration settings from ./configure.json. 
     */
    constructor() {
        try { this.config = require('../../configure.json'); }
        catch (e) { console.log('configuration.json not found'); }
        this.controllerDriver = null;
        this.cameraFunctions = null;
        this.controller = null;

        ///////////save important references///////////////
        //do this so that we dont have to search every time we want something.... does this make it any faster???? what is the speed of the getElementsById method???

        //the targeted setting that will be updated on a controller action
        this.selectedID = document.getElementById('leftTab');
        //the input box that holds the camera's address
        this.cameraIP = document.getElementById('cameraIP');
        //the reference to the camera type drop down menu
        this.cameraType = document.getElementById('cameraType');
        //the reference to the controller drop down menu
        this.controllerName = document.getElementById('controllerName');
        //reference to the remember me box (functionality not yet implemented)
        this.remember = document.getElementById('remember')
        //reference to where the camera's function's will be listed
        this.cameraMappings = document.getElementById('cameraMappings');
        //reference to the application's mappings. not yet important
        //this.applicationMappings = document.getElementById('applicationMappings');
        this.tabLeft = document.getElementById('tabLeft');
        this.tabRight = document.getElementById('tabRight');
    }

    getCameraName(){
        return this.cameraType.value;
    }

    processCommands(){
        if (!this.selectedID) {
            return;
        }
        //console.log(this.cameraFunctions)
        var functString = this.cameraFunctions[this.selectedID.id].inputPattern;
        var commandString = this.controller.lookupMaxState(functString);
        //console.log(functString)
        if(this.selectedID.value != functString && !this.checkIfUsed(commandString)){
            //console.log(commandString)
            this.selectedID.value = commandString;
        }
    }

    deviceChanged(changedObject) {
        var newInnerHTML = "<h2>Camera Mappings</h2>";

        //get camera and controller. make sure neither are null
        var controllerName = this.controllerName.value;
        var cameraType = this.cameraType.value;
        if (!controllerName || controllerName == "Select" || !cameraType || cameraType == "Select") {
            return;
        }

        //if controller changed
        if (changedObject == 'controller'){
            //stop old controller
            if (this.controllerDriver) {this.controllerDriver.stopController();}
            //start new controller
            var { setup } = require('../../controllers/' + controllerName + '/setup');
            setup(this);
        }



        //get controller's application settings from config.json
        this.reloadConfig();


        //update application settings on screen with the ones used by new controller
        try {
            this.tabLeft.value = this.config.controllers[controllerName]['Application'].tabLeft;
            this.tabRight.value = this.config.controllers[controllerName]['Application'].tabRight;
        }
        catch (e) { console.log("no application controls") }

        //get camera's function list from /cameras/CAMERANAME/cameraProperties
        this.cameraFunctions = require('../../cameras/' + cameraType + '/CameraProperties.json');

        //for each function in in cameraproperties, make a new line with "Function: TEXTAREA"
        //if config.controller.camera.function has a mapping then set textarea to that mapping

        var first = '<div class="space"><b>{FUNCTIONNAME} ({TYPE})</b>'
        var second = '<input class="controllerInput" type="text" id="{FUNCTIONNAME}" name="tabRight" value="{VALUE}" onmousedown="adapter.selected(id)" readonly><button class="clearButton" onmouseup="adapter.clear({FUNCTIONNAME})">Clear</button></div>';


        //var functions = this.cameraFunctions.keys();
        for (var key in this.cameraFunctions) {
            //var functName = key;
            var inputType = this.cameraFunctions[key].inputType;
            newInnerHTML += first.replace('{FUNCTIONNAME}', key).replace('{TYPE}', inputType);
            var buttonSettings = '';
            if (this.config.controllers[controllerName][cameraType][key]) {
                buttonSettings = this.config.controllers[controllerName][cameraType][key];
            }
            newInnerHTML += second.replaceAll('{FUNCTIONNAME}', key).replace('{VALUE}', buttonSettings);
        }

        //replace cameraMappings.innerHTML with the string generated by this function.
        this.cameraMappings.innerHTML = newInnerHTML;
    }

    selected(id) {
        this.selectedID = document.getElementById(id);
    }

    reloadConfig() {
        try { this.config = require('../../configure.json'); }
        catch (e) { console.log('configuration.json not found'); }
    }

    setControllerDriver(controllerDriver) {
        this.controllerDriver = controllerDriver;
    }

    setController(controller) {
        this.controller = controller;
    }

    checkIfUsed(commandString){
        //need to remove any kind of axis because we can have a thing mapped to a single axis on a joystick
        // and then still have that entire joystick mapped to another function
        var commandStringAxisFilter = commandString.replaceAll(',X', '').replaceAll(',Y', '');
        for (var i in this.cameraFunctions){
            var doc = document.getElementById(i);
            if(doc.value == commandString || doc.value == commandStringAxisFilter){
                return true;
            }
        }
        return false;
    }


    clear(id) {
        id.value = '';
    }
    

    save() {
        //reload config so that we dont erase any previously saved settings
        this.reloadConfig();
        /*if (!controllerName || controllerName == 'Select' || !cameraType || cameraType == 'Select') {
            return false;
        }*/
        if (this.cameraIP.value.length == 0) {
            alert("Insert Address of Camera");
            return false;
        }
        if (docCameraType.value == "Select") {
            alert("Select a supported camera");
            return false;
        }
        if (docControllers.value == "Select") {
            alert("Select a supported controller")
            return false;
        }

        this.config.cameraIP = this.cameraIP.value;
        this.config.controllerName = this.controllerName.value;
        this.config.cameraType = this.cameraType.value;


        /*update app mappings here
        for(var key in this.applicationFunctions){
            var functionValue = document.getElementById(key).value;
            if(functionValue != '')
            {this.config.controllers[this.config.controllerName]['Application'][key] = functionValue}
        }*/


        //update camera mappings here
        for(var key in this.cameraFunctions){
            var functionValue = document.getElementById(key).value;
            if(functionValue != '')
            {this.config.controllers[this.config.controllerName][this.config.cameraType][key] = functionValue}
        }

        //this.config[controllerName].Application = appMappings


        //JSON.stringify(this.config)

        //write
        try { fs.writeFileSync('./configure.json', JSON.stringify(this.config), 'utf-8'); }
        catch (e) {
            console.log(e);
            return false;
        }

        return true;
    }
}